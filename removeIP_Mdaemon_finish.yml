- name: Remove IP from MDaemon blacklist and check logs
  hosts: remote
  gather_facts: no
  tasks:

    - name: Prompt for IP to remove
      pause:
        prompt: "Nh·∫≠p IP c·∫ßn x√≥a kh·ªèi danh s√°ch blacklist"
      register: ip_input

    - name: Set IP variable
      set_fact:
        ip_to_remove: "{{ ip_input.user_input }}"

    - name: Validate IP format
      fail:
        msg: "‚ùå IP nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i."
      when: ip_to_remove is not match('^\d+\.\d+\.\d+\.\d+$')

    - name: Check if blacklist file exists
      win_stat:
        path: C:\MDaemon\Data\DSBlacklist.dat
      register: blacklist_file

    - name: Verify if IP is in blacklist
      win_shell: |
        $blacklistFile = "C:\\MDaemon\\Data\\DSBlacklist.dat"
        $ipToRemove = "{{ ip_to_remove }}"
        if (Select-String -Path $blacklistFile -Pattern "\b$ipToRemove\b") {
            Write-Output "Found"
        } else {
            Write-Output "NotFound"
        }
      register: ip_check
      when: blacklist_file.stat.exists

    - name: Stop playbook if IP is not in blacklist
      fail:
        msg: "‚úÖ IP {{ ip_to_remove }} kh√¥ng b·ªã ch·∫∑n, kh√¥ng c·∫ßn x√≥a."
      when: ip_check.stdout == "NotFound"

    - name: Remove IP from blacklist
      win_shell: |
        $blacklistFile = "C:\\MDaemon\\Data\\DSBlacklist.dat"
        $ipToRemove = "{{ ip_to_remove }}"
        $blacklistContent = Get-Content $blacklistFile -Raw
        $filteredContent = $blacklistContent -replace ".*\b$ipToRemove\b.*\r?\n?", ""
        [System.IO.File]::WriteAllText($blacklistFile, $filteredContent, [System.Text.Encoding]::Default)
        Write-Output "ƒê√£ x√≥a IP $ipToRemove kh·ªèi danh s√°ch blacklist."
      register: remove_ip_result

    - name: Show IP removal result
      debug:
        msg: "{{ remove_ip_result.stdout_lines }}"

    - name: Search logs for blocked IP reasons
      win_shell: |
        $logDir = "C:\\MDaemon\\Logs"
        $ipToRemove = "{{ ip_to_remove }}"
        $logFiles = Get-ChildItem -Path $logDir -Filter "MDaemon-*-all.log"
        $logFound = $false
        foreach ($logFile in $logFiles) {
            $logPath = $logFile.FullName
            $logEntries = Select-String -Path $logPath -Pattern $ipToRemove | Where-Object { $_ -match "authentication attempt from $ipToRemove" -or $_ -match "Failed" }
            if ($logEntries) {
                $logFound = $true
                Write-Output "Log t√¨m th·∫•y trong file: $logPath"
                $logEntries | ForEach-Object { Write-Output $_.Line }
                Write-Output "-------------------------------------------"
            }
        }
        if (-not $logFound) {
            Write-Output "‚úÖ Kh√¥ng t√¨m th·∫•y log li√™n quan ƒë·∫øn IP {{ ip_to_remove }}."
        }
      register: log_search

    - name: Show log search result
      debug:
        msg: "{{ log_search.stdout_lines }}"
      when: log_search.stdout is defined

    - name: Get last two parts of local IP for folder path
      win_shell: |
        $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -like "112.213.*" }).IPAddress
        $ipParts = $ip.Split(".")
        $lastPart = $ipParts[-2] + $ipParts[-1]
        if ($ipParts[-1].Length -eq 1) {
            $lastPart = $ipParts[-2] + $ipParts[-1].PadLeft(2, '0')
        }
        Write-Output $lastPart
      register: last_part_result

    - name: Set mail folder path
      set_fact:
        mail_folder: "C:\\MDaemon\\Users\\mail{{ last_part_result.stdout | trim }}.dotvndns.vn\\root"

    - name: Check if mail folder exists
      win_stat:
        path: "{{ mail_folder }}"
      register: mail_folder_stat
      when: log_search.stdout is search('Kh√¥ng t√¨m th·∫•y log li√™n quan ƒë·∫øn IP')

    - name: Search .msg files for blocked IP details
      win_shell: |
        $mailFolder = "{{ mail_folder }}"
        $ipToRemove = "{{ ip_to_remove }}"
        $found = $false
        if (Test-Path $mailFolder) {
            $msgFiles = Get-ChildItem -Path $mailFolder -Filter "*.msg"
            foreach ($msgFile in $msgFiles) {
                $msgPath = $msgFile.FullName
                $content = Get-Content $msgPath -Raw
                if ($content -match "Dynamic Screen: Blocked IP Address[:\\s]+$ipToRemove") {
                    $found = $true
                    Write-Output "üõë L√Ω do ch·∫∑n t·ª´ file: $($msgFile.Name)"
                    $lines = $content -split "`r?`n"
                    foreach ($line in $lines) {
                        if ($line -match [regex]::Escape($ipToRemove)) {
                            Write-Output "üìå $line"
                        }
                    }
                    Write-Output "-------------------------------------------"
                }
            }
            if (-not $found) {
                Write-Output "‚úÖ Kh√¥ng t√¨m th·∫•y IP $ipToRemove b·ªã ch·∫∑n trong c√°c file .msg."
            }
        } else {
            Write-Output "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ng∆∞·ªùi d√πng cho IP n√†y."
        }
      register: msg_search
      when:
        - mail_folder_stat is defined
        - mail_folder_stat.stat is defined
        - mail_folder_stat.stat.exists
        - log_search.stdout is search('Kh√¥ng t√¨m th·∫•y log li√™n quan ƒë·∫øn IP')

    - name: Show .msg file search result
      debug:
        msg: "{{ msg_search.stdout_lines }}"
      when: msg_search.stdout is defined

